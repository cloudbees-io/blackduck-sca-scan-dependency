apiVersion: automation.cloudbees.io/v1alpha1
kind: action
name: blackduck-hybrid
inputs:
  server-url: 
    description: 'Server URL'
    required: true
  api-token:  
    description: 'API token'
    required: true
  ref:
    description: 'Flag to indicate the ref that should be archived (same as supplied to checkout)'
    required: false
    default: ''
  workspace-dir:
    description: 'Flag to mention the path where the checked out code will be present'
    required: false
    default: ''
  scan-mode:
    description: 'Flag to mention the scan mode'
    required: false
    default: 'INTELLIGENT'
  project-name:
    description: 'Flag to mention the project name'
    required: false
    default: ''
  project-version:
    description: 'Flag to mention the project version'
    required: false
    default: ''
  detect-cli-params:
    description: 'Flag to mention the detect cli params'
    required: false
    default: ''

runs:
  using: composite
  steps:
    # - name: Generate sha and ref 
    #   uses: docker://public.ecr.aws/l7o7z1g8/actions/assets-plugin-chain-utils:d14621a0e281098b736a3d21cc92edd1fdc8b504
    #   with:
    #     entrypoint: assets-plugin-chain-utils
    #     args: get-commit-info
    #   env:
    #     INPUT_CLOUDBEES_API_TOKEN: ${{ cloudbees.api.token }}
    #     INPUT_CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
    #     INPUT_RUN_ID: ${{ cloudbees.run_id }}
    #     INPUT_CLOUDBEES_EVENT_PATH: /cloudbees/event.json
    #     INPUT_REF: ${{ inputs.ref }}
    #     INPUT_WORKSPACE_DIR: ${{ inputs.workspace-dir }}

    - name: Create archive in workspace
      uses: docker://golang:1.20.3-alpine3.17
      shell: sh
      run: |
          tar -czf /tmp/output.tar -C "$CLOUDBEES_WORKSPACE" .
          mv /tmp/output.tar "$CLOUDBEES_WORKSPACE/"
          ls -latR /cloudbees/workspace

    - name: Generate reference files 
      uses: docker://public.ecr.aws/l7o7z1g8/actions/assets-plugin-chain-utils:0dea78066b1aecbca8a3a6674aade8ee49b5d57a
      with:
          entrypoint: assets-plugin-chain-utils
          args: generate-references --asset-type "CODE"
      env:
          INPUT_CLOUDBEES_API_TOKEN: ${{ cloudbees.api.token }}
          INPUT_CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
          INPUT_RUN_ID: ${{ cloudbees.run_id }}
    - name: Run blackduck compliance plugin
      uses: docker://public.ecr.aws/l7o7z1g8/actions/plugin-blackduck-sca:837940cfecd59520b7b465f51290291fcdf713ae
      env:
          RUN_ID: ${{ cloudbees.run_id }}
          JOB_ID: ${{ job.id }}
          STEP_ID: ${{ step.internal.id }}
          BLACKDUCK_URL: ${{ inputs.server-url }}
          BLACKDUCK_API_TOKEN: ${{ inputs.api-token }}
          BLACKDUCK_PROJECT: ${{ inputs.project-name }}
          BLACKDUCK_PROJECT_VERSION: ${{ inputs.project-version }}
          BLACKDUCK_SCAN_MODE: ${{ inputs.scan-mode }}
          BLACKDUCK_DETECT_CLI_PARAMS: ${{ inputs.detect-cli-params }}
      run: /app/plugin-blackduck-scanner -mode single
    - name: Complete execution plan
      uses: docker://public.ecr.aws/l7o7z1g8/actions/assets-plugin-chain-utils:0dea78066b1aecbca8a3a6674aade8ee49b5d57a
      id: process-outputs
      with:
          entrypoint: assets-plugin-chain-utils
          args: process-outputs
      env:
          INPUT_CLOUDBEES_API_TOKEN: ${{ cloudbees.api.token }} 
          INPUT_CLOUDBEES_API_URL: ${{ cloudbees.api.url }}
          INPUT_RUN_ID: ${{ cloudbees.run_id }}
